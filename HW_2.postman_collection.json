{
	"info": {
		"_postman_id": "3bb717ec-3c1d-4769-914b-bb4ebcebe51c",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20490237"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"const person = pm.response.json()\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Test_1_name\", function () {\r",
							"    pm.expect(person.name).to.eql(\"Klava\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Test_2_age\", function () {\r",
							"    pm.expect(+person.age).to.equal(30);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Test_3_salary\", function () {\r",
							"    pm.expect(person.salary).to.deep.equal(2000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req_P = request.data\r",
							"console.log(req_P)\r",
							"// // 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_P.name\r",
							"console.log(req_name)\r",
							"pm.test(\"Test_4_name\", function () {\r",
							"    pm.expect(person.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req_P.age\r",
							"console.log(req_age)\r",
							"pm.test(\"Test_5_age\", function () {\r",
							"    pm.expect(person.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req_P.salary\r",
							"console.log(req_salary)\r",
							"pm.test(\"Test_6_salary\", function () {\r",
							"    pm.expect(person.salary).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let family = person.family\r",
							"console.log(family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_1_5 = req_salary * 4\r",
							"console.log(salary_1_5)\r",
							"pm.test(\"Test_7_salary_1,5\", function () {\r",
							"    pm.expect(family.u_salary_1_5_year).to.eql(salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Alex/jjd909/62968kjkWpqc45042519611189202evny",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"const pers_pets = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_PP = pm.request.url.query.all()\r",
							"console.log(req_PP)\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_PP_name = req_PP[0].value\r",
							"console.log(req_PP_name)\r",
							" pm.test(\"Test_1_PP_name\", function () {\r",
							"pm.expect(pers_pets.name).to.eql(req_PP_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_PP_age = req_PP[1].value\r",
							"console.log(req_PP_age)\r",
							" pm.test(\"Test_2_PP_age\", function () {\r",
							"pm.expect(pers_pets.age).to.eql(req_PP_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_PP_salary = req_PP[2].value\r",
							"console.log(req_PP_salary)\r",
							" pm.test(\"Test_3_PP_salary\", function () {\r",
							"pm.expect(pers_pets.salary).to.eql(+req_PP_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family = pers_pets.family\r",
							"console.log(family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Test_4_dog_name\", function () {\r",
							"pm.expect(family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Test_5_dog_age\", function () {\r",
							"pm.expect(family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Test_6_dog_Luky\", function () {\r",
							"pm.expect(family.pets.dog.name).to.deep.include(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Test_7_dog_4\", function () {\r",
							"pm.expect(String(family.pets.dog.age)).to.deep.include(\"4\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"const salary_increase = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_S = pm.request.url.query.all()\r",
							"console.log(req_S)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_S_name = req_S[0].value\r",
							"console.log(req_S_name)\r",
							" pm.test(\"Test_1_S_name\", function () {\r",
							"pm.expect(salary_increase.name).to.eql(req_S_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_S_age = req_S[1].value\r",
							"console.log(req_S_age)\r",
							"pm.test(\"Test_1_S_age\", function () {\r",
							"pm.expect(salary_increase.age).to.eql(+req_S_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.let\r",
							"let req_S_salary = req_S[2].value\r",
							"console.log(req_S_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let SI_salary = salary_increase.salary\r",
							"console.log(SI_salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let SI_salary_1 = salary_increase.salary[0]\r",
							"console.log(SI_salary_1)\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let SI_salary_2 = salary_increase.salary[1]\r",
							"console.log(SI_salary_2)\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let SI_salary_3 = salary_increase.salary[2]\r",
							"console.log(SI_salary_3)\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_1\", function () {\r",
							"    pm.expect(SI_salary_1).to.eql(+req_S_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_2\", function () {\r",
							"    pm.expect(+SI_salary_2).to.eql(req_S_salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_3\", function () {\r",
							"    pm.expect(+SI_salary_3).to.eql(req_S_salary*3);\r",
							"});\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i of SI_salary){\r",
							"    console.log(i)\r",
							"}\r",
							"//or\r",
							"for (let i in SI_salary){\r",
							"    console.log(i, SI_salary[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"const salary_year = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req_SY = request.data\r",
							"console.log(req_SY)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Test_1_have\", function () {\r",
							"pm.expect(salary_year).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Test_2_have\", function () {\r",
							"pm.expect(salary_year).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Test_3_have\", function () {\r",
							"pm.expect(salary_year).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Test_3_have\", function () {\r",
							"pm.expect(salary_year).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Test_3_have\", function () {\r",
							"pm.expect(salary_year).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Test_3_have\", function () {\r",
							"pm.expect(salary_year).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_SY_base = req_SY.salary\r",
							"console.log(req_SY_base)\r",
							"pm.test(\"Salary_base\", function () {\r",
							"    pm.expect(salary_year.start_qa_salary).to.eql(+req_SY_base);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_6_months\", function () {\r",
							"    pm.expect(salary_year.qa_salary_after_6_months).to.eql(+(req_SY_base*2));\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_12_months\", function () {\r",
							"    pm.expect(salary_year.qa_salary_after_12_months).to.eql(+(req_SY_base*2.7));\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_1.5_year\", function () {\r",
							"    pm.expect(salary_year[\"qa_salary_after_1.5_year\"]).to.eql(req_SY_base*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_3.5_years\", function () {\r",
							"    pm.expect(salary_year[\"qa_salary_after_3.5_years\"]).to.eql(req_SY_base*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_u_name\", function () {\r",
							"    pm.expect(salary_year.person.u_name[1]).to.eql(+req_SY_base);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Salary_age\", function () {\r",
							"    pm.expect(salary_year.person.u_age).to.eql(+req_SY.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_5_years\", function () {\r",
							"    pm.expect(salary_year.person.u_salary_5_years).to.eql(+(req_SY_base*4.2));\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"console.log(Object.values(salary_year.person))\r",
							"// or\r",
							"let SP = salary_year.person\r",
							"for (let i in SP){\r",
							"    for ( j of SP.u_name){\r",
							"        console.log(j)\r",
							"    }\r",
							"    console.log(i, SP[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}